1
  %97 = and i32 %95, 240
2
  %100 = or i32 %77, %.06294
3
  %102 = trunc i32 %100 to i8
4
  %104 = getelementptr inbounds i8, ptr %.07888, i64 1
5
  %.179 = phi ptr [ %.07888, %93 ], [ %104, %98 ]
6
  %.1 = phi i32 [ %97, %93 ], [ %.06294, %98 ]
7
  %109 = xor i32 %.095, 1
8
  %111 = add nsw i32 %.07690, -1
9
  %113 = icmp sgt i32 %.07690, 1
10
  %115 = icmp eq i32 %109, 0
11
  %117 = trunc i32 %.268 to i16
12
  %119 = trunc i32 %spec.store.select2 to i8
13
  %122 = trunc i32 %.1 to i8
14
  %.063.lcssa106 = phi i8 [ %119, %120 ], [ %119, %._crit_edge ], [ %10, %4 ]
15
  %.066.lcssa105 = phi i16 [ %117, %120 ], [ %117, %._crit_edge ], [ %6, %4 ]
16
  %6 = load i16, ptr %3, align 2
17
  %8 = getelementptr inbounds %struct.adpcm_state, ptr %3, i64 0, i32 1
18
  %10 = load i8, ptr %8, align 2
19
  %12 = icmp sgt i32 %2, 0
20
  %38 = sub nsw i32 %36, %.06692
21
  %14 = sext i8 %10 to i32
22
  %16 = sext i16 %6 to i32
23
  %18 = sext i8 %10 to i64
24
  %20 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %18
25
  %22 = load i32, ptr %20, align 4
26
  %.095 = phi i32 [ %109, %105 ], [ 1, %.lr.ph.preheader ]
27
  %.06294 = phi i32 [ %.1, %105 ], [ undef, %.lr.ph.preheader ]
28
  %.06393 = phi i32 [ %spec.store.select2, %105 ], [ %14, %.lr.ph.preheader ]
29
  %.06692 = phi i32 [ %.268, %105 ], [ %16, %.lr.ph.preheader ]
30
  %.06991 = phi i32 [ %91, %105 ], [ %22, %.lr.ph.preheader ]
31
  %.07690 = phi i32 [ %111, %105 ], [ %2, %.lr.ph.preheader ]
32
  %.07789 = phi ptr [ %32, %105 ], [ %0, %.lr.ph.preheader ]
33
  %.07888 = phi ptr [ %.179, %105 ], [ %1, %.lr.ph.preheader ]
34
  %32 = getelementptr inbounds i16, ptr %.07789, i64 1
35
  %34 = load i16, ptr %.07789, align 2
36
  %36 = sext i16 %34 to i32
37
  %40 = icmp slt i32 %38, 0
38
  %42 = lshr i32 %38, 28
39
  %44 = and i32 %42, 8
40
  %46 = ashr i32 %.06991, 3
41
  %.not84 = icmp slt i32 %spec.select, %.06991
42
  %.073 = select i1 %.not84, i32 0, i32 4
43
  %50 = select i1 %.not84, i32 0, i32 %.06991
44
  %.171 = sub nsw i32 %spec.select, %50
45
  %.064 = add nsw i32 %50, %46
46
  %54 = ashr i32 %.06991, 1
47
  %.not85 = icmp slt i32 %.171, %54
48
  %57 = or i32 %.073, 2
49
  %.174 = select i1 %.not85, i32 %.073, i32 %57
50
  %60 = select i1 %.not85, i32 0, i32 %54
51
  %.272 = sub nsw i32 %.171, %60
52
  %.165 = add nsw i32 %.064, %60
53
  %64 = ashr i32 %.06991, 2
54
  %.not86 = icmp sge i32 %.272, %64
55
  %67 = zext i1 %.not86 to i32
56
  %69 = select i1 %.not86, i32 %64, i32 0
57
  %.2 = add nsw i32 %.165, %69
58
  %72 = sub i32 0, %.2
59
  %.167.p = select i1 %40, i32 %72, i32 %.2
60
  %.167 = add i32 %.167.p, %.06692
61
  %.275 = or i32 %.174, %44
62
  %77 = or i32 %.275, %67
63
  %79 = zext i32 %77 to i64
64
  %81 = getelementptr inbounds [16 x i32], ptr @indexTable, i64 0, i64 %79
65
  %83 = load i32, ptr %81, align 4
66
  %85 = add nsw i32 %83, %.06393
67
  %87 = zext i32 %spec.store.select2 to i64
68
  %89 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %87
69
  %91 = load i32, ptr %89, align 4
70
  %.not87 = icmp eq i32 %.095, 0
71
  %95 = shl nuw nsw i32 %77, 4
1
  %97 = and i32 %95, 240
2
  %100 = or i32 %77, %.06294
3
  %102 = trunc i32 %100 to i8
4
  %104 = getelementptr inbounds i8, ptr %.07888, i64 1
5
  %.179 = phi ptr [ %.07888, %93 ], [ %104, %98 ]
6
  %.1 = phi i32 [ %97, %93 ], [ %.06294, %98 ]
7
  %109 = xor i32 %.095, 1
8
  %111 = add nsw i32 %.07690, -1
9
  %113 = icmp sgt i32 %.07690, 1
10
  %115 = icmp eq i32 %109, 0
11
  %117 = trunc i32 %.268 to i16
12
  %119 = trunc i32 %spec.store.select2 to i8
13
  %122 = trunc i32 %.1 to i8
14
  %.063.lcssa106 = phi i8 [ %119, %120 ], [ %119, %._crit_edge ], [ %10, %4 ]
15
  %.066.lcssa105 = phi i16 [ %117, %120 ], [ %117, %._crit_edge ], [ %6, %4 ]
16
  %6 = load i16, ptr %3, align 2
17
  %8 = getelementptr inbounds %struct.adpcm_state, ptr %3, i64 0, i32 1
18
  %10 = load i8, ptr %8, align 2
19
  %12 = icmp sgt i32 %2, 0
20
  %38 = sub nsw i32 %36, %.06692
21
  %14 = sext i8 %10 to i32
22
  %16 = sext i16 %6 to i32
23
  %18 = sext i8 %10 to i64
24
  %20 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %18
25
  %22 = load i32, ptr %20, align 4
26
  %.095 = phi i32 [ %109, %105 ], [ 1, %.lr.ph.preheader ]
27
  %.06294 = phi i32 [ %.1, %105 ], [ undef, %.lr.ph.preheader ]
28
  %.06393 = phi i32 [ %spec.store.select2, %105 ], [ %14, %.lr.ph.preheader ]
29
  %.06692 = phi i32 [ %.268, %105 ], [ %16, %.lr.ph.preheader ]
30
  %.06991 = phi i32 [ %91, %105 ], [ %22, %.lr.ph.preheader ]
31
  %.07690 = phi i32 [ %111, %105 ], [ %2, %.lr.ph.preheader ]
32
  %.07789 = phi ptr [ %32, %105 ], [ %0, %.lr.ph.preheader ]
33
  %.07888 = phi ptr [ %.179, %105 ], [ %1, %.lr.ph.preheader ]
34
  %32 = getelementptr inbounds i16, ptr %.07789, i64 1
35
  %34 = load i16, ptr %.07789, align 2
36
  %36 = sext i16 %34 to i32
37
  %40 = icmp slt i32 %38, 0
38
  %42 = lshr i32 %38, 28
39
  %44 = and i32 %42, 8
40
  %46 = ashr i32 %.06991, 3
41
  %.not84 = icmp slt i32 %spec.select, %.06991
42
  %.073 = select i1 %.not84, i32 0, i32 4
43
  %50 = select i1 %.not84, i32 0, i32 %.06991
44
  %.171 = sub nsw i32 %spec.select, %50
45
  %.064 = add nsw i32 %50, %46
46
  %54 = ashr i32 %.06991, 1
47
  %.not85 = icmp slt i32 %.171, %54
48
  %57 = or i32 %.073, 2
49
  %.174 = select i1 %.not85, i32 %.073, i32 %57
50
  %60 = select i1 %.not85, i32 0, i32 %54
51
  %.272 = sub nsw i32 %.171, %60
52
  %.165 = add nsw i32 %.064, %60
53
  %64 = ashr i32 %.06991, 2
54
  %.not86 = icmp sge i32 %.272, %64
55
  %67 = zext i1 %.not86 to i32
56
  %69 = select i1 %.not86, i32 %64, i32 0
57
  %.2 = add nsw i32 %.165, %69
58
  %72 = sub i32 0, %.2
59
  %.167.p = select i1 %40, i32 %72, i32 %.2
60
  %.167 = add i32 %.167.p, %.06692
61
  %.275 = or i32 %.174, %44
62
  %77 = or i32 %.275, %67
63
  %79 = zext i32 %77 to i64
64
  %81 = getelementptr inbounds [16 x i32], ptr @indexTable, i64 0, i64 %79
65
  %83 = load i32, ptr %81, align 4
66
  %85 = add nsw i32 %83, %.06393
67
  %87 = zext i32 %spec.store.select2 to i64
68
  %89 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %87
69
  %91 = load i32, ptr %89, align 4
70
  %.not87 = icmp eq i32 %.095, 0
71
  %95 = shl nuw nsw i32 %77, 4
72
  %6 = load i16, ptr %3, align 2
73
  %8 = getelementptr inbounds %struct.adpcm_state, ptr %3, i64 0, i32 1
74
  %10 = load i8, ptr %8, align 2
75
  %12 = icmp sgt i32 %2, 0
76
  %40 = lshr i32 %38, 4
77
  %14 = sext i8 %10 to i32
78
  %16 = sext i16 %6 to i32
79
  %18 = sext i8 %10 to i64
80
  %20 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %18
81
  %22 = load i32, ptr %20, align 4
82
  %.067 = phi i32 [ %47, %41 ], [ 0, %.lr.ph.preheader ]
83
  %.04366 = phi i32 [ %.1, %41 ], [ undef, %.lr.ph.preheader ]
84
  %.04465 = phi i32 [ %spec.store.select2, %41 ], [ %14, %.lr.ph.preheader ]
85
  %.04764 = phi i32 [ %.249, %41 ], [ %16, %.lr.ph.preheader ]
86
  %.05063 = phi i32 [ %92, %41 ], [ %22, %.lr.ph.preheader ]
87
  %.05262 = phi i32 [ %98, %41 ], [ %2, %.lr.ph.preheader ]
88
  %.05361 = phi ptr [ %96, %41 ], [ %1, %.lr.ph.preheader ]
89
  %.05460 = phi ptr [ %.155, %41 ], [ %0, %.lr.ph.preheader ]
90
  %.not = icmp eq i32 %.067, 0
91
  %34 = getelementptr inbounds i8, ptr %.05460, i64 1
92
  %36 = load i8, ptr %.05460, align 1
93
  %38 = zext i8 %36 to i32
94
  %.155 = phi ptr [ %34, %32 ], [ %.05460, %.lr.ph ]
95
  %.051.in = phi i32 [ %40, %32 ], [ %.04366, %.lr.ph ]
96
  %.1 = phi i32 [ %38, %32 ], [ %.04366, %.lr.ph ]
97
  %.051 = and i32 %.051.in, 15
98
  %47 = xor i32 %.067, 1
99
  %49 = zext i32 %.051 to i64
100
  %51 = getelementptr inbounds [16 x i32], ptr @indexTable, i64 0, i64 %49
101
  %53 = load i32, ptr %51, align 4
102
  %55 = add nsw i32 %53, %.04465
103
  %57 = and i32 %.051.in, 8
104
  %59 = ashr i32 %.05063, 3
105
  %61 = and i32 %.051.in, 4
106
  %.not56 = icmp eq i32 %61, 0
107
  %64 = select i1 %.not56, i32 0, i32 %.05063
108
  %spec.select = add nsw i32 %64, %59
109
  %67 = and i32 %.051.in, 2
110
  %.not57 = icmp eq i32 %67, 0
111
  %70 = ashr i32 %.05063, 1
112
  %72 = select i1 %.not57, i32 0, i32 %70
113
  %.146 = add nsw i32 %spec.select, %72
114
  %75 = and i32 %.051.in, 1
115
  %.not58 = icmp eq i32 %75, 0
116
  %78 = ashr i32 %.05063, 2
117
  %80 = select i1 %.not58, i32 0, i32 %78
118
  %.2 = add nsw i32 %.146, %80
119
  %.not59 = icmp eq i32 %57, 0
120
  %84 = sub i32 0, %.2
121
  %.148.p = select i1 %.not59, i32 %.2, i32 %84
122
  %.148 = add i32 %.148.p, %.04764
123
  %88 = zext i32 %spec.store.select2 to i64
124
  %90 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %88
125
  %92 = load i32, ptr %90, align 4
126
  %94 = trunc i32 %.249 to i16
127
  %96 = getelementptr inbounds i16, ptr %.05361, i64 1
128
  %98 = add nsw i32 %.05262, -1
129
  %100 = icmp sgt i32 %.05262, 1
130
  %102 = trunc i32 %spec.store.select2 to i8
131
  %.pre-phi = phi i16 [ %94, %._crit_edge.loopexit ], [ %6, %4 ]
132
  %.044.lcssa = phi i8 [ %102, %._crit_edge.loopexit ], [ %10, %4 ]
1
  %97 = and i32 %95, 240
2
  %100 = or i32 %77, %.06294
3
  %102 = trunc i32 %100 to i8
4
  %104 = getelementptr inbounds i8, ptr %.07888, i64 1
5
  %.179 = phi ptr [ %.07888, %93 ], [ %104, %98 ]
6
  %.1 = phi i32 [ %97, %93 ], [ %.06294, %98 ]
7
  %109 = xor i32 %.095, 1
8
  %111 = add nsw i32 %.07690, -1
9
  %113 = icmp sgt i32 %.07690, 1
10
  %115 = icmp eq i32 %109, 0
11
  %117 = trunc i32 %.268 to i16
12
  %119 = trunc i32 %spec.store.select2 to i8
13
  %122 = trunc i32 %.1 to i8
14
  %.063.lcssa106 = phi i8 [ %119, %120 ], [ %119, %._crit_edge ], [ %10, %4 ]
15
  %.066.lcssa105 = phi i16 [ %117, %120 ], [ %117, %._crit_edge ], [ %6, %4 ]
16
  %6 = load i16, ptr %3, align 2
17
  %8 = getelementptr inbounds %struct.adpcm_state, ptr %3, i64 0, i32 1
18
  %10 = load i8, ptr %8, align 2
19
  %12 = icmp sgt i32 %2, 0
20
  %38 = sub nsw i32 %36, %.06692
21
  %14 = sext i8 %10 to i32
22
  %16 = sext i16 %6 to i32
23
  %18 = sext i8 %10 to i64
24
  %20 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %18
25
  %22 = load i32, ptr %20, align 4
26
  %.095 = phi i32 [ %109, %105 ], [ 1, %.lr.ph.preheader ]
27
  %.06294 = phi i32 [ %.1, %105 ], [ undef, %.lr.ph.preheader ]
28
  %.06393 = phi i32 [ %spec.store.select2, %105 ], [ %14, %.lr.ph.preheader ]
29
  %.06692 = phi i32 [ %.268, %105 ], [ %16, %.lr.ph.preheader ]
30
  %.06991 = phi i32 [ %91, %105 ], [ %22, %.lr.ph.preheader ]
31
  %.07690 = phi i32 [ %111, %105 ], [ %2, %.lr.ph.preheader ]
32
  %.07789 = phi ptr [ %32, %105 ], [ %0, %.lr.ph.preheader ]
33
  %.07888 = phi ptr [ %.179, %105 ], [ %1, %.lr.ph.preheader ]
34
  %32 = getelementptr inbounds i16, ptr %.07789, i64 1
35
  %34 = load i16, ptr %.07789, align 2
36
  %36 = sext i16 %34 to i32
37
  %40 = icmp slt i32 %38, 0
38
  %42 = lshr i32 %38, 28
39
  %44 = and i32 %42, 8
40
  %46 = ashr i32 %.06991, 3
41
  %.not84 = icmp slt i32 %spec.select, %.06991
42
  %.073 = select i1 %.not84, i32 0, i32 4
43
  %50 = select i1 %.not84, i32 0, i32 %.06991
44
  %.171 = sub nsw i32 %spec.select, %50
45
  %.064 = add nsw i32 %50, %46
46
  %54 = ashr i32 %.06991, 1
47
  %.not85 = icmp slt i32 %.171, %54
48
  %57 = or i32 %.073, 2
49
  %.174 = select i1 %.not85, i32 %.073, i32 %57
50
  %60 = select i1 %.not85, i32 0, i32 %54
51
  %.272 = sub nsw i32 %.171, %60
52
  %.165 = add nsw i32 %.064, %60
53
  %64 = ashr i32 %.06991, 2
54
  %.not86 = icmp sge i32 %.272, %64
55
  %67 = zext i1 %.not86 to i32
56
  %69 = select i1 %.not86, i32 %64, i32 0
57
  %.2 = add nsw i32 %.165, %69
58
  %72 = sub i32 0, %.2
59
  %.167.p = select i1 %40, i32 %72, i32 %.2
60
  %.167 = add i32 %.167.p, %.06692
61
  %.275 = or i32 %.174, %44
62
  %77 = or i32 %.275, %67
63
  %79 = zext i32 %77 to i64
64
  %81 = getelementptr inbounds [16 x i32], ptr @indexTable, i64 0, i64 %79
65
  %83 = load i32, ptr %81, align 4
66
  %85 = add nsw i32 %83, %.06393
67
  %87 = zext i32 %spec.store.select2 to i64
68
  %89 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %87
69
  %91 = load i32, ptr %89, align 4
70
  %.not87 = icmp eq i32 %.095, 0
71
  %95 = shl nuw nsw i32 %77, 4
72
  %6 = load i16, ptr %3, align 2
73
  %8 = getelementptr inbounds %struct.adpcm_state, ptr %3, i64 0, i32 1
74
  %10 = load i8, ptr %8, align 2
75
  %12 = icmp sgt i32 %2, 0
76
  %40 = lshr i32 %38, 4
77
  %14 = sext i8 %10 to i32
78
  %16 = sext i16 %6 to i32
79
  %18 = sext i8 %10 to i64
80
  %20 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %18
81
  %22 = load i32, ptr %20, align 4
82
  %.067 = phi i32 [ %47, %41 ], [ 0, %.lr.ph.preheader ]
83
  %.04366 = phi i32 [ %.1, %41 ], [ undef, %.lr.ph.preheader ]
84
  %.04465 = phi i32 [ %spec.store.select2, %41 ], [ %14, %.lr.ph.preheader ]
85
  %.04764 = phi i32 [ %.249, %41 ], [ %16, %.lr.ph.preheader ]
86
  %.05063 = phi i32 [ %92, %41 ], [ %22, %.lr.ph.preheader ]
87
  %.05262 = phi i32 [ %98, %41 ], [ %2, %.lr.ph.preheader ]
88
  %.05361 = phi ptr [ %96, %41 ], [ %1, %.lr.ph.preheader ]
89
  %.05460 = phi ptr [ %.155, %41 ], [ %0, %.lr.ph.preheader ]
90
  %.not = icmp eq i32 %.067, 0
91
  %34 = getelementptr inbounds i8, ptr %.05460, i64 1
92
  %36 = load i8, ptr %.05460, align 1
93
  %38 = zext i8 %36 to i32
94
  %.155 = phi ptr [ %34, %32 ], [ %.05460, %.lr.ph ]
95
  %.051.in = phi i32 [ %40, %32 ], [ %.04366, %.lr.ph ]
96
  %.1 = phi i32 [ %38, %32 ], [ %.04366, %.lr.ph ]
97
  %.051 = and i32 %.051.in, 15
98
  %47 = xor i32 %.067, 1
99
  %49 = zext i32 %.051 to i64
100
  %51 = getelementptr inbounds [16 x i32], ptr @indexTable, i64 0, i64 %49
101
  %53 = load i32, ptr %51, align 4
102
  %55 = add nsw i32 %53, %.04465
103
  %57 = and i32 %.051.in, 8
104
  %59 = ashr i32 %.05063, 3
105
  %61 = and i32 %.051.in, 4
106
  %.not56 = icmp eq i32 %61, 0
107
  %64 = select i1 %.not56, i32 0, i32 %.05063
108
  %spec.select = add nsw i32 %64, %59
109
  %67 = and i32 %.051.in, 2
110
  %.not57 = icmp eq i32 %67, 0
111
  %70 = ashr i32 %.05063, 1
112
  %72 = select i1 %.not57, i32 0, i32 %70
113
  %.146 = add nsw i32 %spec.select, %72
114
  %75 = and i32 %.051.in, 1
115
  %.not58 = icmp eq i32 %75, 0
116
  %78 = ashr i32 %.05063, 2
117
  %80 = select i1 %.not58, i32 0, i32 %78
118
  %.2 = add nsw i32 %.146, %80
119
  %.not59 = icmp eq i32 %57, 0
120
  %84 = sub i32 0, %.2
121
  %.148.p = select i1 %.not59, i32 %.2, i32 %84
122
  %.148 = add i32 %.148.p, %.04764
123
  %88 = zext i32 %spec.store.select2 to i64
124
  %90 = getelementptr inbounds [89 x i32], ptr @stepsizeTable, i64 0, i64 %88
125
  %92 = load i32, ptr %90, align 4
126
  %94 = trunc i32 %.249 to i16
127
  %96 = getelementptr inbounds i16, ptr %.05361, i64 1
128
  %98 = add nsw i32 %.05262, -1
129
  %100 = icmp sgt i32 %.05262, 1
130
  %102 = trunc i32 %spec.store.select2 to i8
131
  %.pre-phi = phi i16 [ %94, %._crit_edge.loopexit ], [ %6, %4 ]
132
  %.044.lcssa = phi i8 [ %102, %._crit_edge.loopexit ], [ %10, %4 ]
133
  %3 = icmp slt i32 %1, 0
134
  %5 = phi i32 [ %14, %8 ], [ %1, %0 ]
135
  %7 = icmp eq i32 %5, 0
136
  %10 = shl nuw nsw i32 %5, 1
137
  %12 = shl nsw i32 %5, 2
138
  %16 = icmp slt i32 %14, 0
139
  %19 = load ptr, ptr @stderr, align 8
140
  %21 = load i16, ptr @state, align 2
141
  %23 = sext i16 %21 to i32
142
  %25 = load i8, ptr getelementptr inbounds (%struct.adpcm_state, ptr @state, i64 0, i32 1), align 2
143
  %27 = sext i8 %25 to i32
